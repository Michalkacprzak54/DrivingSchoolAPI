// <auto-generated />
using System;
using DrivingSchoolAPI.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DrivingSchoolAPI.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20241226122707_UpdateDatabase")]
    partial class UpdateDatabase
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("DrivingSchoolAPI.Entities.City", b =>
                {
                    b.Property<int>("IdCity")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id_miasto");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdCity"));

                    b.Property<string>("CityName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("nazwa");

                    b.HasKey("IdCity");

                    b.ToTable("miasto", (string)null);
                });

            modelBuilder.Entity("DrivingSchoolAPI.Entities.Client", b =>
                {
                    b.Property<int>("IdClient")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id_klient");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdClient"));

                    b.Property<DateOnly>("ClientBirthDay")
                        .HasColumnType("date")
                        .HasColumnName("data_urodzenia");

                    b.Property<string>("ClientFirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("imie");

                    b.Property<int?>("ClientFlatNumber")
                        .HasColumnType("int")
                        .HasColumnName("numer_lokalu");

                    b.Property<string>("ClientHouseNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("numer_domu");

                    b.Property<int>("ClientIdCity")
                        .HasColumnType("int")
                        .HasColumnName("id_miasto");

                    b.Property<int>("ClientIdZipCode")
                        .HasColumnType("int")
                        .HasColumnName("id_kod_pocztowy");

                    b.Property<string>("ClientLastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("nazwisko");

                    b.Property<string>("ClientPhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("nr_telefonu");

                    b.Property<bool>("ClientStatus")
                        .HasColumnType("bit")
                        .HasColumnName("czy_kursant");

                    b.Property<string>("ClientStreet")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ulica");

                    b.Property<int?>("TraineeCourseIdTraineeCourse")
                        .HasColumnType("int");

                    b.HasKey("IdClient");

                    b.HasIndex("ClientIdCity");

                    b.HasIndex("ClientIdZipCode");

                    b.HasIndex("TraineeCourseIdTraineeCourse");

                    b.ToTable("klient", (string)null);
                });

            modelBuilder.Entity("DrivingSchoolAPI.Entities.ClientLogin", b =>
                {
                    b.Property<int>("IdClientLogin")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id_login_klient");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdClientLogin"));

                    b.Property<string>("ClientEmail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("adres_email");

                    b.Property<string>("ClientPassword")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("haslo");

                    b.Property<int>("IdClient")
                        .HasColumnType("int")
                        .HasColumnName("id_klient");

                    b.HasKey("IdClientLogin");

                    b.HasIndex("IdClient")
                        .IsUnique();

                    b.ToTable("login_klient", (string)null);
                });

            modelBuilder.Entity("DrivingSchoolAPI.Entities.ClientService", b =>
                {
                    b.Property<int>("IdClientService")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id_klient_usluga");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdClientService"));

                    b.Property<int>("ClientId")
                        .HasColumnType("int")
                        .HasColumnName("id_klient");

                    b.Property<int>("HowManyUsed")
                        .HasColumnType("int")
                        .HasColumnName("ile_wykorzystane");

                    b.Property<bool>("IsUsed")
                        .HasColumnType("bit")
                        .HasColumnName("czy_wykorzystana");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("uwagi");

                    b.Property<DateTime>("PurchaseDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("data_zakupu");

                    b.Property<int>("Quantity")
                        .HasColumnType("int")
                        .HasColumnName("ilosc");

                    b.Property<int>("ServiceId")
                        .HasColumnType("int")
                        .HasColumnName("id_usluga");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("stan");

                    b.HasKey("IdClientService");

                    b.HasIndex("ClientId");

                    b.HasIndex("ServiceId");

                    b.ToTable("klient_usluga", (string)null);
                });

            modelBuilder.Entity("DrivingSchoolAPI.Entities.CourseDetails", b =>
                {
                    b.Property<int>("IdCourseDetails")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id_szczegoly");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdCourseDetails"));

                    b.Property<DateOnly>("CreationDate")
                        .HasColumnType("date")
                        .HasColumnName("data_utworzenia");

                    b.Property<int>("IdTraineeCourse")
                        .HasColumnType("int")
                        .HasColumnName("id_kursant_kurs");

                    b.Property<bool>("InternalExam")
                        .HasColumnType("bit")
                        .HasColumnName("egzamin_wewnetrzny");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("uwagi");

                    b.Property<double>("PraticeHoursCount")
                        .HasColumnType("float")
                        .HasColumnName("liczba_godzin_praktyka");

                    b.Property<double>("TheoryHoursCount")
                        .HasColumnType("float")
                        .HasColumnName("liczba_godzin_teoria");

                    b.HasKey("IdCourseDetails");

                    b.HasIndex("IdTraineeCourse")
                        .IsUnique();

                    b.ToTable("szczegoly_kurs", (string)null);
                });

            modelBuilder.Entity("DrivingSchoolAPI.Entities.Entitlement", b =>
                {
                    b.Property<int>("IdEntitlement")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id_uprawnienie");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdEntitlement"));

                    b.Property<string>("EntitlementName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("uprawnienie");

                    b.HasKey("IdEntitlement");

                    b.ToTable("uprawnienia", (string)null);
                });

            modelBuilder.Entity("DrivingSchoolAPI.Entities.InscrutorEntitlement", b =>
                {
                    b.Property<int>("IdInscrutorEntitlement")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id_instruktor_uprawnienie");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdInscrutorEntitlement"));

                    b.Property<int>("IdEntitlement")
                        .HasColumnType("int")
                        .HasColumnName("id_uprawnienie");

                    b.Property<int>("IdInstructor")
                        .HasColumnType("int")
                        .HasColumnName("id_instruktor");

                    b.HasKey("IdInscrutorEntitlement");

                    b.HasIndex("IdEntitlement");

                    b.HasIndex("IdInstructor");

                    b.ToTable("instruktor_uprawnienie", (string)null);
                });

            modelBuilder.Entity("DrivingSchoolAPI.Entities.Instructor", b =>
                {
                    b.Property<int>("IdInstructor")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id_instruktor");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdInstructor"));

                    b.Property<string>("InstructorEmail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("email");

                    b.Property<string>("InstructorFirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("imie");

                    b.Property<string>("InstructorLastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("nazwisko");

                    b.Property<string>("InstructorPhhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("numer_telefonu");

                    b.Property<bool>("InstructorPratice")
                        .HasColumnType("bit")
                        .HasColumnName("czy_prowadzi_praktyke");

                    b.Property<bool>("InstructorTheory")
                        .HasColumnType("bit")
                        .HasColumnName("czy_prowadzi_teorie");

                    b.HasKey("IdInstructor");

                    b.ToTable("instruktor", (string)null);
                });

            modelBuilder.Entity("DrivingSchoolAPI.Entities.InstructorDetails", b =>
                {
                    b.Property<int>("IdInstructorDetails")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id_szczegoly_instruktor");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdInstructorDetails"));

                    b.Property<int>("IdInstructor")
                        .HasColumnType("int")
                        .HasColumnName("id_instruktor");

                    b.Property<int>("InstructorCityId")
                        .HasColumnType("int")
                        .HasColumnName("id_miasto");

                    b.Property<int?>("InstructorFlatNumber")
                        .HasColumnType("int")
                        .HasColumnName("nr_lokalu");

                    b.Property<string>("InstructorHouseNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("nr_domu");

                    b.Property<string>("InstructorPassword")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("haslo");

                    b.Property<decimal>("InstructorPesel")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("pesel");

                    b.Property<string>("InstructorStreet")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ulica");

                    b.Property<int>("InstructorZipCodeId")
                        .HasColumnType("int")
                        .HasColumnName("id_kod_pocztowy");

                    b.HasKey("IdInstructorDetails");

                    b.HasIndex("IdInstructor")
                        .IsUnique();

                    b.HasIndex("InstructorCityId");

                    b.HasIndex("InstructorZipCodeId");

                    b.ToTable("szczegoly_instruktor", (string)null);
                });

            modelBuilder.Entity("DrivingSchoolAPI.Entities.Invoice", b =>
                {
                    b.Property<int>("IdInvocie")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id_faktura");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdInvocie"));

                    b.Property<decimal>("FullAmount")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("kwota_calkowita");

                    b.Property<int>("IdClient")
                        .HasColumnType("int")
                        .HasColumnName("id_klient");

                    b.Property<string>("InvocieNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("numer_faktura");

                    b.Property<string>("InvoiceState")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("stan");

                    b.Property<DateTime>("IssueDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("data_wystawienia");

                    b.Property<DateTime?>("PaymentDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("data_platnosci");

                    b.HasKey("IdInvocie");

                    b.HasIndex("IdClient");

                    b.ToTable("faktura", (string)null);
                });

            modelBuilder.Entity("DrivingSchoolAPI.Entities.InvoiceItem", b =>
                {
                    b.Property<int>("IdInvoiceItem")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id_pozycja");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdInvoiceItem"));

                    b.Property<int>("IdClientService")
                        .HasColumnType("int")
                        .HasColumnName("id_klient_usluga");

                    b.Property<int>("IdInvocie")
                        .HasColumnType("int")
                        .HasColumnName("id_faktura");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("kwota");

                    b.Property<int>("Quantity")
                        .HasColumnType("int")
                        .HasColumnName("ilosc");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("cena_jednostkowa");

                    b.Property<int>("Vat")
                        .HasColumnType("int")
                        .HasColumnName("stawka_vat");

                    b.HasKey("IdInvoiceItem");

                    b.HasIndex("IdInvocie");

                    b.ToTable("pozycja_faktura", (string)null);
                });

            modelBuilder.Entity("DrivingSchoolAPI.Entities.LecturePresence", b =>
                {
                    b.Property<int>("IdLecturePresence")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id_obecnosc");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdLecturePresence"));

                    b.Property<int>("IdCourseDetails")
                        .HasColumnType("int")
                        .HasColumnName("id_szczegoly");

                    b.Property<int>("IdTheorySchedule")
                        .HasColumnType("int")
                        .HasColumnName("id_harmonogram_wyklad");

                    b.Property<DateOnly>("PresanceDate")
                        .HasColumnType("date")
                        .HasColumnName("data_obecnosci");

                    b.HasKey("IdLecturePresence");

                    b.ToTable("obecnosc_wyklad", (string)null);
                });

            modelBuilder.Entity("DrivingSchoolAPI.Entities.Payment", b =>
                {
                    b.Property<int>("IdPayment")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id_platnosc");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdPayment"));

                    b.Property<decimal>("AmountPaid")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("kwota");

                    b.Property<int>("IdInvoice")
                        .HasColumnType("int")
                        .HasColumnName("id_faktura");

                    b.Property<DateTime>("PaymentDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("data_platnosci");

                    b.Property<string>("PaymentDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("opis_platnosci");

                    b.Property<string>("PaymentMethod")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("metoda_platnosci");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("status");

                    b.HasKey("IdPayment");

                    b.HasIndex("IdInvoice");

                    b.ToTable("platnosc", (string)null);
                });

            modelBuilder.Entity("DrivingSchoolAPI.Entities.Photo", b =>
                {
                    b.Property<int>("IdPhoto")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id_zdjecie");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdPhoto"));

                    b.Property<string>("AlternativeDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("opis_alternatywny");

                    b.Property<int>("IdService")
                        .HasColumnType("int")
                        .HasColumnName("id_usluga");

                    b.Property<string>("PhotoPath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("sciezka_zdjecie");

                    b.HasKey("IdPhoto");

                    b.HasIndex("IdService");

                    b.ToTable("zdjecie", (string)null);
                });

            modelBuilder.Entity("DrivingSchoolAPI.Entities.Pratice", b =>
                {
                    b.Property<int>("IdPratice")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id_praktyka");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdPratice"));

                    b.Property<TimeOnly>("EndHour")
                        .HasColumnType("time")
                        .HasColumnName("godzina_zakonczenia");

                    b.Property<int>("IdCourseDetails")
                        .HasColumnType("int")
                        .HasColumnName("id_szczegoly");

                    b.Property<int>("IdPraticeSchedule")
                        .HasColumnType("int")
                        .HasColumnName("id_harmonogram");

                    b.Property<int>("IdStatus")
                        .HasColumnType("int")
                        .HasColumnName("id_status");

                    b.Property<DateOnly>("PraticeDate")
                        .HasColumnType("date")
                        .HasColumnName("data_praktyk");

                    b.Property<DateOnly>("ReservationDate")
                        .HasColumnType("date")
                        .HasColumnName("data_rezerwacji");

                    b.Property<TimeOnly>("StartHour")
                        .HasColumnType("time")
                        .HasColumnName("godzina_rozpoczecia");

                    b.HasKey("IdPratice");

                    b.ToTable("praktyka", (string)null);
                });

            modelBuilder.Entity("DrivingSchoolAPI.Entities.PraticeSchedule", b =>
                {
                    b.Property<int>("IdPraticeSchedule")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id_harmonogram_praktyka");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdPraticeSchedule"));

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date")
                        .HasColumnName("data");

                    b.Property<string>("DayName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("dzien_tygodnia");

                    b.Property<TimeOnly>("EndDate")
                        .HasColumnType("time")
                        .HasColumnName("godzina_zakończenia");

                    b.Property<int>("IdInstructor")
                        .HasColumnType("int")
                        .HasColumnName("id_instruktor");

                    b.Property<TimeOnly>("StartDate")
                        .HasColumnType("time")
                        .HasColumnName("godzina_rozpoczęcia");

                    b.Property<bool>("is_Available")
                        .HasColumnType("bit")
                        .HasColumnName("czy_aktualne");

                    b.HasKey("IdPraticeSchedule");

                    b.ToTable("harmonogram_praktyka", (string)null);
                });

            modelBuilder.Entity("DrivingSchoolAPI.Entities.Promotion", b =>
                {
                    b.Property<int>("IdPromotion")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id_promocja");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdPromotion"));

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnName("aktywna");

                    b.Property<string>("PromotionDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("opis_promocja");

                    b.Property<string>("PromotionName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("nazwa_promocja");

                    b.Property<decimal>("PromotionValue")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("wartosc_promocja");

                    b.HasKey("IdPromotion");

                    b.ToTable("promocja", (string)null);
                });

            modelBuilder.Entity("DrivingSchoolAPI.Entities.Service", b =>
                {
                    b.Property<int>("IdService")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id_usluga");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdService"));

                    b.Property<string>("ServiceDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("opis");

                    b.Property<string>("ServiceName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("nazwa_usluga");

                    b.Property<decimal>("ServiceNetPrice")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("cena_netto");

                    b.Property<string>("ServiceType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("typ_usluga");

                    b.Property<int>("ServiceVatRate")
                        .HasColumnType("int")
                        .HasColumnName("stawka_vat");

                    b.Property<int>("TraineeCourseIdTraineeCourse")
                        .HasColumnType("int");

                    b.HasKey("IdService");

                    b.HasIndex("TraineeCourseIdTraineeCourse");

                    b.ToTable("usluga", (string)null);
                });

            modelBuilder.Entity("DrivingSchoolAPI.Entities.ServicePromotion", b =>
                {
                    b.Property<int>("IdServicePromotion")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id_usluga_promocja");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdServicePromotion"));

                    b.Property<DateOnly>("AssigmentDate")
                        .HasColumnType("date")
                        .HasColumnName("data_przypisania");

                    b.Property<int>("IdPromotion")
                        .HasColumnType("int")
                        .HasColumnName("id_promocja");

                    b.Property<int>("IdService")
                        .HasColumnType("int")
                        .HasColumnName("id_usluga");

                    b.HasKey("IdServicePromotion");

                    b.HasIndex("IdPromotion")
                        .IsUnique();

                    b.HasIndex("IdService")
                        .IsUnique();

                    b.ToTable("usluga_promocja", (string)null);
                });

            modelBuilder.Entity("DrivingSchoolAPI.Entities.Status", b =>
                {
                    b.Property<int>("IdStatus")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id_status");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdStatus"));

                    b.Property<string>("StatusName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("status");

                    b.HasKey("IdStatus");

                    b.ToTable("status", (string)null);
                });

            modelBuilder.Entity("DrivingSchoolAPI.Entities.TheorySchedule", b =>
                {
                    b.Property<int>("IdTheorySchedule")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id_harmonogram_wyklad");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdTheorySchedule"));

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date")
                        .HasColumnName("data");

                    b.Property<string>("DayName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("dzien_tygodnia");

                    b.Property<TimeOnly>("EndHour")
                        .HasColumnType("time")
                        .HasColumnName("godzina_zakonczenia");

                    b.Property<string>("GroupName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("grupa");

                    b.Property<int>("IdInsctructor")
                        .HasColumnType("int")
                        .HasColumnName("id_instruktor");

                    b.Property<TimeOnly>("StartHour")
                        .HasColumnType("time")
                        .HasColumnName("godzina_rozpoczecia");

                    b.HasKey("IdTheorySchedule");

                    b.ToTable("harmonogram_wyklad", (string)null);
                });

            modelBuilder.Entity("DrivingSchoolAPI.Entities.TraineeCourse", b =>
                {
                    b.Property<int>("IdTraineeCourse")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id_kursant_kurs");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdTraineeCourse"));

                    b.Property<DateOnly?>("EndDate")
                        .HasColumnType("date")
                        .HasColumnName("data_zakonczenia");

                    b.Property<int>("IdClient")
                        .HasColumnType("int")
                        .HasColumnName("id_klient");

                    b.Property<int>("IdClientService")
                        .HasColumnType("int")
                        .HasColumnName("id_klient_usluga");

                    b.Property<int>("IdStatus")
                        .HasColumnType("int")
                        .HasColumnName("id_status");

                    b.Property<bool>("MedicalCheck")
                        .HasColumnType("bit")
                        .HasColumnName("badania_lekarskie");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("uwagi");

                    b.Property<decimal>("PESEL")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("PESEL");

                    b.Property<string>("PKK")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("pkk");

                    b.Property<DateOnly>("StartDate")
                        .HasColumnType("date")
                        .HasColumnName("data_rozpoczecia");

                    b.HasKey("IdTraineeCourse");

                    b.HasIndex("IdClient");

                    b.HasIndex("IdClientService");

                    b.HasIndex("IdStatus");

                    b.ToTable("kursant_kurs", (string)null);
                });

            modelBuilder.Entity("DrivingSchoolAPI.Entities.ZipCode", b =>
                {
                    b.Property<int>("IdZipCode")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id_kod_pocztowy");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdZipCode"));

                    b.Property<string>("ZipCodeNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("kod_pocztowy");

                    b.HasKey("IdZipCode");

                    b.ToTable("kod_pocztowy", (string)null);
                });

            modelBuilder.Entity("DrivingSchoolAPI.Entities.Client", b =>
                {
                    b.HasOne("DrivingSchoolAPI.Entities.City", "City")
                        .WithMany()
                        .HasForeignKey("ClientIdCity")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DrivingSchoolAPI.Entities.ZipCode", "ZipCode")
                        .WithMany()
                        .HasForeignKey("ClientIdZipCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DrivingSchoolAPI.Entities.TraineeCourse", "TraineeCourse")
                        .WithMany()
                        .HasForeignKey("TraineeCourseIdTraineeCourse");

                    b.Navigation("City");

                    b.Navigation("TraineeCourse");

                    b.Navigation("ZipCode");
                });

            modelBuilder.Entity("DrivingSchoolAPI.Entities.ClientLogin", b =>
                {
                    b.HasOne("DrivingSchoolAPI.Entities.Client", null)
                        .WithOne("ClientLogin")
                        .HasForeignKey("DrivingSchoolAPI.Entities.ClientLogin", "IdClient")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DrivingSchoolAPI.Entities.ClientService", b =>
                {
                    b.HasOne("DrivingSchoolAPI.Entities.Client", "Client")
                        .WithMany("ClientServices")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DrivingSchoolAPI.Entities.Service", "Service")
                        .WithMany()
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");

                    b.Navigation("Service");
                });

            modelBuilder.Entity("DrivingSchoolAPI.Entities.CourseDetails", b =>
                {
                    b.HasOne("DrivingSchoolAPI.Entities.TraineeCourse", "TraineeCourse")
                        .WithOne("CourseDetails")
                        .HasForeignKey("DrivingSchoolAPI.Entities.CourseDetails", "IdTraineeCourse")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_szczegoly_kurs_kursant_kurs");

                    b.Navigation("TraineeCourse");
                });

            modelBuilder.Entity("DrivingSchoolAPI.Entities.InscrutorEntitlement", b =>
                {
                    b.HasOne("DrivingSchoolAPI.Entities.Entitlement", "Entitlement")
                        .WithMany("InstructorEntitlements")
                        .HasForeignKey("IdEntitlement")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DrivingSchoolAPI.Entities.Instructor", "Instructor")
                        .WithMany("InstructorEntitlements")
                        .HasForeignKey("IdInstructor")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Entitlement");

                    b.Navigation("Instructor");
                });

            modelBuilder.Entity("DrivingSchoolAPI.Entities.InstructorDetails", b =>
                {
                    b.HasOne("DrivingSchoolAPI.Entities.Instructor", "Instructor")
                        .WithOne("InstructorDetails")
                        .HasForeignKey("DrivingSchoolAPI.Entities.InstructorDetails", "IdInstructor")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DrivingSchoolAPI.Entities.City", "City")
                        .WithMany()
                        .HasForeignKey("InstructorCityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DrivingSchoolAPI.Entities.ZipCode", "ZipCode")
                        .WithMany()
                        .HasForeignKey("InstructorZipCodeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("City");

                    b.Navigation("Instructor");

                    b.Navigation("ZipCode");
                });

            modelBuilder.Entity("DrivingSchoolAPI.Entities.Invoice", b =>
                {
                    b.HasOne("DrivingSchoolAPI.Entities.Client", "Client")
                        .WithMany()
                        .HasForeignKey("IdClient")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");
                });

            modelBuilder.Entity("DrivingSchoolAPI.Entities.InvoiceItem", b =>
                {
                    b.HasOne("DrivingSchoolAPI.Entities.Invoice", "Invoice")
                        .WithMany("InvoviceItems")
                        .HasForeignKey("IdInvocie")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Invoice");
                });

            modelBuilder.Entity("DrivingSchoolAPI.Entities.Payment", b =>
                {
                    b.HasOne("DrivingSchoolAPI.Entities.Invoice", "Invoice")
                        .WithMany("Payments")
                        .HasForeignKey("IdInvoice")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Invoice");
                });

            modelBuilder.Entity("DrivingSchoolAPI.Entities.Photo", b =>
                {
                    b.HasOne("DrivingSchoolAPI.Entities.Service", "Servcie")
                        .WithMany("Photos")
                        .HasForeignKey("IdService")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Servcie");
                });

            modelBuilder.Entity("DrivingSchoolAPI.Entities.Service", b =>
                {
                    b.HasOne("DrivingSchoolAPI.Entities.TraineeCourse", "TraineeCourse")
                        .WithMany()
                        .HasForeignKey("TraineeCourseIdTraineeCourse")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TraineeCourse");
                });

            modelBuilder.Entity("DrivingSchoolAPI.Entities.ServicePromotion", b =>
                {
                    b.HasOne("DrivingSchoolAPI.Entities.Promotion", "Promotion")
                        .WithOne("ServicePromotion")
                        .HasForeignKey("DrivingSchoolAPI.Entities.ServicePromotion", "IdPromotion")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DrivingSchoolAPI.Entities.Service", "Service")
                        .WithOne("ServicePromotion")
                        .HasForeignKey("DrivingSchoolAPI.Entities.ServicePromotion", "IdService")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Promotion");

                    b.Navigation("Service");
                });

            modelBuilder.Entity("DrivingSchoolAPI.Entities.TraineeCourse", b =>
                {
                    b.HasOne("DrivingSchoolAPI.Entities.Client", "Client")
                        .WithMany()
                        .HasForeignKey("IdClient")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_kursant_kurs_klient");

                    b.HasOne("DrivingSchoolAPI.Entities.ClientService", "ClientService")
                        .WithMany()
                        .HasForeignKey("IdClientService")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_kursant_kurs_klient_usluga");

                    b.HasOne("DrivingSchoolAPI.Entities.Status", "Status")
                        .WithMany()
                        .HasForeignKey("IdStatus")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");

                    b.Navigation("ClientService");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("DrivingSchoolAPI.Entities.Client", b =>
                {
                    b.Navigation("ClientLogin");

                    b.Navigation("ClientServices");
                });

            modelBuilder.Entity("DrivingSchoolAPI.Entities.Entitlement", b =>
                {
                    b.Navigation("InstructorEntitlements");
                });

            modelBuilder.Entity("DrivingSchoolAPI.Entities.Instructor", b =>
                {
                    b.Navigation("InstructorDetails");

                    b.Navigation("InstructorEntitlements");
                });

            modelBuilder.Entity("DrivingSchoolAPI.Entities.Invoice", b =>
                {
                    b.Navigation("InvoviceItems");

                    b.Navigation("Payments");
                });

            modelBuilder.Entity("DrivingSchoolAPI.Entities.Promotion", b =>
                {
                    b.Navigation("ServicePromotion")
                        .IsRequired();
                });

            modelBuilder.Entity("DrivingSchoolAPI.Entities.Service", b =>
                {
                    b.Navigation("Photos");

                    b.Navigation("ServicePromotion")
                        .IsRequired();
                });

            modelBuilder.Entity("DrivingSchoolAPI.Entities.TraineeCourse", b =>
                {
                    b.Navigation("CourseDetails");
                });
#pragma warning restore 612, 618
        }
    }
}
